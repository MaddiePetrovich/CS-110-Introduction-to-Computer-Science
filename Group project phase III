
import tkinter as tk
from tkinter import messagebox
import pygame
import sys


#game code:

def start_game():
    game_over = False
    # Initialize Pygame
    pygame.init()

    # Constants
    # Constants
    WIDTH, HEIGHT = 800, 600
    PADDLE_WIDTH, PADDLE_HEIGHT = 100, 10
    BALL_RADIUS = 10
    BRICK_WIDTH, BRICK_HEIGHT = 80, 20
    PADDLE_SPEED = 10
    BALL_SPEED_X, BALL_SPEED_Y = 5, 5

    # Colors
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    VIOLET = (138,43,226)
    
    # Set up the game window
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Brick Breaker")

    # Initialize game variables
    ball_x = WIDTH // 2
    ball_y = HEIGHT // 4
    ball_speed_x = 5
    ball_speed_y = 5


    paddle_bottom_x = (WIDTH - PADDLE_WIDTH) // 2
    paddle_bottom_y = HEIGHT - PADDLE_HEIGHT
    paddle_speed = 7
    
    ball_below_count = 0

    # Create the paddle
    paddle = pygame.Rect((WIDTH - PADDLE_WIDTH) // 2, HEIGHT - PADDLE_HEIGHT - 10, PADDLE_WIDTH, PADDLE_HEIGHT)

    # Create the ball
    ball = pygame.Rect(ball_x - BALL_RADIUS, ball_y - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2)
    ball_speed = [ball_speed_x, ball_speed_y]

    #create the bricks
    bricks = [pygame.Rect(col * BRICK_WIDTH, row * BRICK_HEIGHT, BRICK_WIDTH, BRICK_HEIGHT) for row in range(5) for col in range(WIDTH // BRICK_WIDTH)]

    #create bottom of screen
    ground = pygame.Rect((5, 590), (800, 5))
    
    #removes game start screen once the game is started
    start_window.destroy()
    
    # Game loop
    clock = pygame.time.Clock()  # Create a clock object to control the frame rate
    while game_over == False:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
        
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and paddle.left > 0:
            paddle.move_ip(-PADDLE_SPEED, 0)
        if keys[pygame.K_RIGHT] and paddle.right < WIDTH:
            paddle.move_ip(PADDLE_SPEED, 0)
        
        # Update ball position
        ball.move_ip(ball_speed)
        
        # Ball collisions with walls
        if ball.left <= 0 or ball.right >= WIDTH:
            ball_speed[0] = -ball_speed[0]
        if ball.top <= 0:
            ball_speed[1] = -ball_speed[1]

        
        #Check if ball is missed
        if ball.colliderect(ground):
            print("Ball is out of bounds. Resetting position.")
            ball = pygame.Rect(ball_x - BALL_RADIUS, ball_y - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2)
            ball_speed = [ball_speed_x, ball_speed_y]
            ball_below_count += 1

        # Ball collisions with paddle
        if ball.colliderect(paddle) and ball_speed[1] > 0:
            ball_speed[1] = -ball_speed[1]
            
         # Ball collisions with bricks
        for brick in bricks[:]:
            if ball.colliderect(brick):
                bricks.remove(brick)
                ball_speed[1] = -ball_speed[1]
        
        #if paddle misses ball 3 times it will end the game and return to menu    
        if ball_below_count >= 3:
            game_over = True

        # Update the display
        screen.fill(BLACK)
        pygame.draw.rect(screen, WHITE, paddle)
        pygame.draw.rect(screen, VIOLET, ground)
        pygame.draw.circle(screen, VIOLET, ball.center, BALL_RADIUS)

        for brick in bricks:
            pygame.draw.rect(screen, WHITE, brick)

        pygame.display.flip()

        clock.tick(60)  # Control the frames per second (FPS)
            
    game_over_screen()

#creates game home screen
def start_screen():
    global start_window
    start_window=tk.Tk()
    start_window.title('Brick Breaker')
    start_window.geometry("600x400")
    start_window.configure(bg="#856ff8")
    
    title=tk.Label(start_window, text = "Brick Breaker", font =('Impact', 50, 'bold'), fg = 'white', bg = '#856ff8')
    title.pack()
    
    #shows the directions for how to play 
    def how_to():
        directions_lable=tk.Label(start_window, text = "Use directional keys to control the paddle.\nTry to break as many bricks as you can to score points.\nIf you miss the ball three times the game is over.")
        directions_lable.pack()
        directions_button.destroy()

    #creates the start and directions buttons
    start_button = tk.Button(start_window, text = "Start", font =('Impact', 20, 'bold'), fg = '#4a148c', command = start_game)
    start_button.pack(padx = 5, pady = 5)
    directions_button = tk.Button(start_window, text = "How to Play", font = ('Impact', 20, 'bold'), fg = '#4a148c', command = how_to)
    directions_button.pack()
    
def game_over_screen():
    global game_over_window

    # Create a new Tkinter window for the game over screen
    game_over_window = tk.Toplevel()
    game_over_window.title("Game Over")
    game_over_window.geometry("300x150")

    # Display game over message and restart button
    game_over_label = tk.Label(game_over_window, text = "Game Over!", font = ('Segoe UI', 20), fg="red")
    game_over_label.pack(pady=10)

    restart_button = tk.Button(game_over_window, text = "Restart", command = restart_game)
    restart_button.pack(pady=10)
    
def restart_game():
    game_over_window.destroy()
    start_game()

#function that checks if the username an password are correct
def check_login():
    entered_username=username_entry.get()
    entered_password=password_entry.get()
    
    if entered_username==('maddie') and entered_password==('madd1'):
        messagebox.showinfo('Login Successful','Welcome, {}'.format(entered_username))
        root.destroy()
        start_screen()
    elif entered_username==('tigger') and entered_password==('tigg2'):
        messagebox.showinfo('Login Successful','Welcome, {}'.format(entered_username))
        root.destroy()
        start_screen()
    elif entered_username==('brandon') and entered_password==('bran3'):
        messagebox.showinfo('Login Successful','Welcome, {}'.format(entered_username))
        root.destroy()
        start_screen()
    else:
        messagebox.showerror('Login Failed','Invalid username or password')

#builds the root and window for login        
root=tk.Tk()
root.title("Brick Breaker Login")
root.geometry("320x150")
root.configure(bg="#856ff8")

#creates the lable and entry box for the username
username_label=tk.Label(root,text="Username:", font =('Segoe UI', 15), bg="#856ff8", fg="white")
username_label.grid(row=0,column=0,padx=10,
pady=10,sticky="E")
username_entry=tk.Entry(root,bg="#ecf0f1",fg="#2c3e50")
username_entry.grid(row=0,column=1,padx=10,
pady=10)

#creates the lable and entry box for the password
password_label=tk.Label(root,text="Password:",font =('Segoe UI', 15), bg="#856ff8",fg="white")
password_label.grid(row=1,column=0,padx=10,pady=10,sticky="E")
password_entry=tk.Entry(root,show="*",bg="#ecf0f1", fg="#2c3e50")
password_entry.grid(row=1,column=1,padx=10,pady=10)

#creates the login button
login_button=tk.Button(root, fg = '#4a148c', text="Login", command=check_login, font =('Segoe UI', 15), borderwidth = '1')
login_button.grid(row=2,column=0,columnspan=2,pady=10)

root.mainloop()

